

.container {
	padding: 2em;
}

// Calculate grid columns

.grid__col {
  @include mq(medium) {
    @include g-columns; 
  }
}

// Column styles
[class^="grid__col--"] {
  @include mq(small)  {
    margin-top: em(12px);
    margin-bottom: em(12px);
  }
  @include mq(medium) {
    @include doubly(percentage($g-gutter-width / $context));    
    float: left;
    min-height: 1px;
    padding-left: 10px;
    padding-right: 10px;
    &:last-of-type {
      float: right;
    }
  }
}

.grid__col {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;  
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));    
    // Generate column modifier classes
    &--#{$i}.theme__colors {
      background-color: $teal;
      @extend %btn;
    }
  }
}


.grid {
  @extend %clearfix;
  @extend .centered;
  width: 90%;
 
  // Make nested grid 100%
  [class*="grid__col--"] > & {
    width: 100%; 
  }

  // Set a max-width for grid container
  @include mq(large) {
    max-width: $g-cont-max-w;
  }
}